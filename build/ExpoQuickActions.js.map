{"version":3,"file":"ExpoQuickActions.js","sourceRoot":"","sources":["../src/ExpoQuickActions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AAErE,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,gBAW3C,CAAC;AAEF,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,gBAAgB,CAAC,CAAC;AAYnD,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,gBAAgB,CAAC;AAE/E,MAAM,UAAU,WAAW,CAAC,QAAgC;IAC1D,OAAO,OAAO,CAAC,WAAW,CAAQ,eAAe,EAAE,QAAQ,CAAC,CAAC;AAC/D,CAAC","sourcesContent":["import { EventEmitter, NativeModulesProxy } from \"expo-modules-core\";\n\nconst ExpoQuickActions = NativeModulesProxy.ExpoQuickActions as {\n  __expo_module_name__?: string;\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n\n  initial?: Action;\n  setItems(data?: Action[]): Promise<void>;\n  getInitial(): Promise<Action>;\n  isSupported(): Promise<boolean>;\n};\n\nconst emitter = new EventEmitter(ExpoQuickActions);\n\ntype Event = {};\n\nexport type Action = {\n  icon?: unknown;\n  id: string;\n  subtitle?: string | null;\n  title: string;\n  userInfo?: Record<string, any> | null;\n};\n\nexport const { initial, setItems, isSupported, getInitial } = ExpoQuickActions;\n\nexport function addListener(listener: (event: Event) => void) {\n  return emitter.addListener<Event>(\"onQuickAction\", listener);\n}\n"]}