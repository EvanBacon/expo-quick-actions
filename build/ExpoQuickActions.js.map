{"version":3,"file":"ExpoQuickActions.js","sourceRoot":"","sources":["../src/ExpoQuickActions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAOtE,MAAM,gBAAgB,GAAG,mBAAmB,CAC1C,kBAAkB,CAKnB,CAAC;AAWF,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,gBAAgB,CAAC;AAEnE,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,gBAAgB,CAAC,CAAC;AAEnD,MAAM,UAAU,WAAW,CAAC,QAAkC;IAC5D,OAAO,OAAO,CAAC,WAAW,CAAS,eAAe,EAAE,QAAQ,CAAC,CAAC;AAChE,CAAC","sourcesContent":["import { EventEmitter, requireNativeModule } from \"expo-modules-core\";\n\ntype ConstructorParametersType<T extends abstract new (...args: any) => any> =\n  T extends abstract new (...args: infer P) => any ? P : never;\n\ntype PrivateNativeModule = ConstructorParametersType<typeof EventEmitter>[0];\n\nconst ExpoQuickActions = requireNativeModule(\n  \"ExpoQuickActions\"\n) as PrivateNativeModule & {\n  initial?: Action;\n  setItems(data?: Action[]): Promise<void>;\n  isSupported(): Promise<boolean>;\n};\n\nexport type Action = {\n  id: string;\n  title: string;\n  icon?: string | null;\n  subtitle?: string | null;\n  /** Additional serial parameters for the action.  */\n  params?: Record<string, number | string | boolean | null | undefined> | null;\n};\n\nexport const { initial, setItems, isSupported } = ExpoQuickActions;\n\nconst emitter = new EventEmitter(ExpoQuickActions);\n\nexport function addListener(listener: (action: Action) => void) {\n  return emitter.addListener<Action>(\"onQuickAction\", listener);\n}\n"]}