{"version":3,"file":"router.js","sourceRoot":"","sources":["../src/router.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,KAAK,YAAY,MAAM,SAAS,CAAC;AACxC,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AAsBpD,MAAM,UAAU,cAAc,CAC5B,MAA2B;IAE3B,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACvD,CAAC;AAED,SAAS,MAAM,CAAC,IAAS;IACvB,OAAO,CACL,OAAO,IAAI,KAAK,QAAQ;QACxB,CAAC,OAAO,IAAI,KAAK,QAAQ;YACvB,IAAI,KAAK,IAAI;YACb,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CACrC,CAAC;AACJ,CAAC;AAID;;;;;;GAMG;AACH,MAAM,UAAU,qBAAqB,CACnC,QAEgD;IAEhD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAE3B,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,SAAS,GAAG,IAAI,CAAC;QAErB,MAAM,aAAa,GAAG,CAAC,IAAyB,EAAE,EAAE;YAClD,IAAI,SAAS,EAAE,CAAC;gBACd,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;oBAC9C,UAAU,CAAC,GAAG,EAAE;wBACd,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACpC,CAAC,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,YAAY,CAAC,OAAO,EAAE,CAAC;YACzB,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC;QAED,MAAM,GAAG,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;QACtE,OAAO,GAAG,EAAE;YACV,SAAS,GAAG,KAAK,CAAC;YAClB,GAAG,EAAE,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;AAC/C,CAAC","sourcesContent":["import React from \"react\";\nimport * as QuickActions from \"./index\";\nimport { useRouter } from \"expo-router/build/hooks\";\n\ntype Href = any;\n\n// type TypedHref = Parameters<typeof router.push>[0];\n\nexport type RouterAction<THref extends Href = Href> = Omit<\n  QuickActions.Action,\n  \"params\"\n> & {\n  id: string;\n  title: string;\n  icon?: string | null;\n  /** iOS-only. Subtitle for the action. */\n  subtitle?: string | null;\n  /** Additional serial parameters for the action. */\n  params: {\n    /** Href should be defined in router projects. */\n    href: THref;\n  } & QuickActions.Action[\"params\"];\n};\n\nexport function isRouterAction(\n  action: QuickActions.Action\n): action is RouterAction {\n  return !!action.params && isHref(action.params.href);\n}\n\nfunction isHref(href: any): href is Href {\n  return (\n    typeof href === \"string\" ||\n    (typeof href === \"object\" &&\n      href !== null &&\n      typeof href.pathname === \"string\")\n  );\n}\n\ntype OptionalPromise<T> = T | Promise<T>;\n\n/**\n * Handle quick actions with `params.href`.\n *\n * **Warning:** This should be used inside of a sub-layout route (`app/(root)/_layout.tsx`) and not inside the root layout route (`app/_layout.tsx`) as it will attempt a navigation.\n *\n * @param callback optional callback to handle the action. If the callback returns true, the router will **not** handle the action.\n */\nexport function useQuickActionRouting(\n  callback?: (\n    data: QuickActions.Action\n  ) => OptionalPromise<boolean | undefined | void>\n) {\n  const router = useRouter();\n\n  React.useEffect(() => {\n    let isMounted = true;\n\n    const validCallback = (data: QuickActions.Action) => {\n      if (isMounted) {\n        if (!callback?.(data) && isRouterAction(data)) {\n          setTimeout(() => {\n            router.navigate(data.params.href);\n          });\n        }\n      }\n    };\n\n    if (QuickActions.initial) {\n      validCallback(QuickActions.initial);\n    }\n\n    const sub = QuickActions.addListener((event) => validCallback(event));\n    return () => {\n      isMounted = false;\n      sub?.remove();\n    };\n  }, [QuickActions.initial, router, callback]);\n}\n"]}