{"version":3,"file":"icon.js","sourceRoot":"","sources":["../src/icon.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,2BAA2B,EAAE,MAAM,mBAAmB,CAAC;AAqB9E,MAAM,WAAW,GAAG,2BAA2B,CAAkB,aAAa,CAAC,CAAC;AAEhF,iEAAiE;AACjE,MAAM,CAAC,MAAM,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC;AAEzE;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,OAAO,GAAG,WAAW,EAAE,OAAO,CAAC;AAE5C;;;GAGG;AACH,MAAM,CAAC,MAAM,OAAO,GAAG,WAAW,EAAE,OAAO,CAAC","sourcesContent":["import { NativeModule, requireOptionalNativeModule } from \"expo-modules-core\";\n\ndeclare class ExpoAppIconType extends NativeModule {\n  /** Indicates whether the device supports alternate app icons. */\n  isSupported: boolean;\n\n  /**\n   * Sets the alternate app icon for the application.\n   * @param name The name of the alternate icon to set, or `null` to reset to the default icon.\n   * @return A `Promise` that resolves with the current alternate icon name, or `null` if no alternate icon is set.\n   * @throws {Error} If there is an error setting the alternate icon.\n   */\n  setIcon(name: string | null): Promise<string | null>;\n\n  /**\n   * Gets the current alternate app icon name.\n   * @return A `Promise` that resolves with the current alternate icon name, or `null` if no alternate icon is set.\n   */\n  getIcon(): Promise<string | null>;\n}\n\nconst ExpoAppIcon = requireOptionalNativeModule<ExpoAppIconType>(\"ExpoAppIcon\");\n\n/** Indicates whether the device supports alternate app icons. */\nexport const isSupported = ExpoAppIcon ? ExpoAppIcon.isSupported : false;\n\n/**\n * Sets the alternate app icon for the application. This closes the app on Android.\n *\n * @param name The name of the alternate icon to set, or `null` to reset to the default icon.\n * @return A `Promise` that resolves with the current alternate icon name, or `null` if no alternate icon is set.\n * @throws {Error} If there is an error setting the alternate icon.\n */\nexport const setIcon = ExpoAppIcon?.setIcon;\n\n/**\n * Gets the current alternate app icon name.\n * @return A `Promise` that resolves with the current alternate icon name, or `null` if no alternate icon is set.\n */\nexport const getIcon = ExpoAppIcon?.getIcon;\n"]}