{"version":3,"file":"icon-hooks.js","sourceRoot":"","sources":["../src/icon-hooks.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AACrC,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,aAAa;AACb,OAAO,EAAE,KAAK,EAAE,MAAM,gCAAgC,CAAC;AAEvD,MAAM,kBAAkB,GAAG,KAAK,CAAC,aAAa,CAG3C;IACD,QAAQ,EAAE,IAAI;IACd,WAAW,EAAE,GAAG,EAAE,GAAE,CAAC;CACtB,CAAC,CAAC;AAEH,MAAM,CAAC,OAAO,UAAU,mBAAmB,CAAC,EAC1C,QAAQ,GAGT;IACC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,WAAW,EAAE,CAAC;IAE9C,OAAO,CACL,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAC5D;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,kBAAkB,CAAC,QAAQ,CAAC,CAC/B,CAAC;AACJ,CAAC;AAED,MAAM,WAAW,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC;AAEzE,SAAS,iBAAiB;IACxB,OAAO,KAAK,CAAC,QAAQ,CAAgB,IAAI,CAAC,CAAC;AAC7C,CAAC;AAED,SAAS,iBAAiB;IACxB,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAgB,IAAI,CAAC,CAAC;IAE7D,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,WAAW,EAAE,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACnC,IAAI,SAAS;gBAAE,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,EAAE;YACV,SAAS,GAAG,KAAK,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAC/B,CAAC,IAAmB,EAAE,EAAE;QACtB,WAAW,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3B,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;IACzB,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IACF,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,qBAAqB;IACnC,MAAM,CAAC,KAAK,CAAC,GAAG,UAAU,EAAE,CAAC;IAE7B,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QACxB,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;IAChC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AACd,CAAC;AAED,MAAM,UAAU,UAAU;IACxB,MAAM,GAAG,GAAG,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;IACjD,IAAI,CAAC,GAAG;QAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACzD,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;AACzC,CAAC","sourcesContent":["import { ExpoAppIcon } from \"./icon\";\nimport React from \"react\";\n\n// @ts-ignore\nimport { ICONS } from \"expo-quick-actions/types/icons\";\n\nconst DynamicIconContext = React.createContext<{\n  iconName: string | null;\n  setIconName: (iconName: string | null) => void;\n}>({\n  iconName: null,\n  setIconName: () => {},\n});\n\nexport default function DynamicIconProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [iconName, setIconName] = useIconName();\n\n  return (\n    <DynamicIconContext.Provider value={{ iconName, setIconName }}>\n      {children}\n    </DynamicIconContext.Provider>\n  );\n}\n\nconst useIconName = !ExpoAppIcon ? useIconNameExpoGo : useIconNameCustom;\n\nfunction useIconNameExpoGo(): [string | null, (name: string | null) => void] {\n  return React.useState<string | null>(null);\n}\n\nfunction useIconNameCustom(): [string | null, (name: string | null) => void] {\n  const [icon, _setIcon] = React.useState<string | null>(null);\n\n  React.useEffect(() => {\n    let isMounted = true;\n    ExpoAppIcon?.getIcon().then((icon) => {\n      if (isMounted) _setIcon(icon || null);\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  const setIcon = React.useCallback(\n    (icon: string | null) => {\n      ExpoAppIcon?.setIcon(icon);\n      _setIcon(icon || null);\n    },\n    [_setIcon]\n  );\n  return [icon, setIcon];\n}\n\nexport function useSelectedIconSource(): any | null {\n  const [_icon] = useAppIcon();\n\n  return React.useMemo(() => {\n    const icon = ICONS.find((icon) => icon.id === _icon);\n    return icon ? icon.src : null;\n  }, [_icon]);\n}\n\nexport function useAppIcon() {\n  const ctx = React.useContext(DynamicIconContext);\n  if (!ctx) throw new Error(\"Missing DynamicIconProvider\");\n  return [ctx.iconName, ctx.setIconName];\n}\n"]}